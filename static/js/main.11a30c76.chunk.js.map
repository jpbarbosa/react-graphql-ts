{"version":3,"sources":["apollo.ts","queries/tasks.ts","components/Header.tsx","components/tasks/Form.tsx","hooks/useForm.ts","contexts/ActiveTask.tsx","hooks/useTasks.ts","components/tasks/New.tsx","components/tasks/Item.tsx","components/tasks/List.tsx","components/App.tsx","index.tsx"],"names":["client","ApolloClient","cache","InMemoryCache","uri","process","GET_TASKS","gql","CREATE_TASK","UPDATE_TASK","REMOVE_TASK","Header","data","useQuery","className","tasks","length","TaskForm","activeTask","handleAction","focus","useRef","initialState","useState","formState","setFormState","useEffect","current","handleChange","event","target","name","value","handleSubmit","preventDefault","useForm","onSubmit","type","onChange","placeholder","ref","Context","createContext","setActiveTask","task","console","warn","useActiveTask","useContext","ActiveTaskStore","children","Provider","useTasks","options","refetchQueries","query","useMutation","createTask","updateTask","removeTask","TaskNew","undefined","id","variables","onClick","TaskItem","TaskList","loading","error","message","JSON","stringify","networkError","map","App","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.11a30c76.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: `${process.env.REACT_APP_API}/graphql`,\n});\n","import { gql } from '@apollo/client';\n\nexport const GET_TASKS = gql`\n  {\n    tasks {\n      id\n      name\n    }\n  }\n`;\n\nexport const CREATE_TASK = gql`\n  mutation ($name: String!) {\n    createTask(name: $name) {\n      id\n      name\n    }\n  }\n`;\n\nexport const UPDATE_TASK = gql`\n  mutation ($id: ID!, $name: String!) {\n    updateTask(id: $id, name: $name) {\n      id\n      name\n    }\n  }\n`;\n\nexport const REMOVE_TASK = gql`\n  mutation ($id: ID!) {\n    removeTask(id: $id)\n  }\n`;\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_TASKS } from '../queries/tasks';\nimport { TaskData } from '../types/tasks';\n\nexport const Header: React.FC = () => {\n  const { data } = useQuery<TaskData>(GET_TASKS);\n\n  return (\n    <header>\n      <h1>\n        <div className=\"title\">React Basic CRUD</div>\n        <div className=\"subtitle\">With GraphQL And TypeScript</div>\n      </h1>\n      <div className=\"counter\">{data?.tasks.length}</div>\n    </header>\n  );\n};\n","import React, { useRef } from 'react';\nimport { useForm } from '../../hooks/useForm';\nimport { Task } from '../../types/tasks';\n\ninterface IProps {\n  activeTask: Task;\n  handleAction: Function;\n}\n\nexport const TaskForm: React.FC<IProps> = ({ activeTask, handleAction }) => {\n  const focus = useRef<HTMLInputElement>(null);\n  const { handleChange, handleSubmit, formState } = useForm<Task>(\n    activeTask,\n    handleAction,\n    focus\n  );\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={formState.name}\n        onChange={handleChange}\n        placeholder=\"Task description\"\n        ref={focus}\n      />\n      <input type=\"submit\" />\n    </form>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nexport const useForm = <T>(\n  initialState: T,\n  handleAction: Function,\n  focus: React.RefObject<HTMLInputElement>\n) => {\n  const [formState, setFormState] = useState<T>(initialState);\n\n  useEffect(() => {\n    focus.current?.focus();\n  }, [focus]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFormState({ ...formState, [event.target.name]: event.target.value });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    handleAction(formState);\n  };\n\n  return { formState, handleChange, handleSubmit };\n};\n","import { createContext, useContext, useState } from 'react';\nimport { Task } from '../types/tasks';\n\ntype ContextType = {\n  activeTask?: Task;\n  setActiveTask: (task?: Task) => void;\n};\n\nconst Context = createContext<ContextType>({\n  setActiveTask: (task) => console.warn('no task provider'),\n});\n\nexport const useActiveTask = () => useContext(Context);\n\nexport const ActiveTaskStore: React.FC = ({ children }) => {\n  const [activeTask, setActiveTask] = useState<Task>();\n  return (\n    <Context.Provider value={{ activeTask, setActiveTask }}>\n      {children}\n    </Context.Provider>\n  );\n};\n","import { useMutation } from '@apollo/client';\nimport { TaskData } from '../types/tasks';\nimport {\n  GET_TASKS,\n  CREATE_TASK,\n  UPDATE_TASK,\n  REMOVE_TASK,\n} from '../queries/tasks';\n\nexport const useTasks = () => {\n  const options = {\n    refetchQueries: [{ query: GET_TASKS }],\n  };\n\n  const [createTask] = useMutation<TaskData>(CREATE_TASK, options);\n  const [updateTask] = useMutation<TaskData>(UPDATE_TASK, options);\n  const [removeTask] = useMutation<TaskData>(REMOVE_TASK, options);\n\n  return { createTask, updateTask, removeTask };\n};\n","import React from 'react';\nimport { TaskForm } from './Form';\nimport { Task } from '../../types/tasks';\nimport { useActiveTask } from '../../contexts/ActiveTask';\nimport { useTasks } from '../../hooks/useTasks';\n\nexport const TaskNew: React.FC = () => {\n  const { activeTask, setActiveTask } = useActiveTask();\n  const { createTask } = useTasks();\n\n  const handleCreateTask = (task: Task) => {\n    createTask({ variables: task });\n    setActiveTask();\n  };\n\n  return (\n    <div className=\"new\">\n      {activeTask && activeTask.id === undefined ? (\n        <TaskForm handleAction={handleCreateTask} activeTask={activeTask} />\n      ) : (\n        <button className=\"bt-new\" onClick={() => setActiveTask({ name: '' })}>\n          New Task\n        </button>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { TaskForm } from './Form';\nimport { Task } from '../../types/tasks';\nimport { useActiveTask } from '../../contexts/ActiveTask';\nimport { useTasks } from '../../hooks/useTasks';\n\ninterface IProps {\n  task: Task;\n}\n\nexport const TaskItem: React.FC<IProps> = ({ task }) => {\n  const { activeTask, setActiveTask } = useActiveTask();\n  const { updateTask, removeTask } = useTasks();\n\n  const handleUpdateTask = (task: Task) => {\n    updateTask({ variables: task });\n    setActiveTask();\n  };\n\n  return (\n    <>\n      {activeTask && activeTask.id === task.id ? (\n        <TaskForm activeTask={activeTask} handleAction={handleUpdateTask} />\n      ) : (\n        <div className=\"item\">\n          <span onClick={() => setActiveTask(task)}>{task.name}</span>\n          <button\n            className=\"bt-remove\"\n            onClick={() => removeTask({ variables: { id: task.id } })}\n          >\n            X\n          </button>\n        </div>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { TaskItem } from './Item';\nimport { TaskData } from '../../types/tasks';\nimport { GET_TASKS } from '../../queries/tasks';\n\nexport const TaskList: React.FC = () => {\n  const { loading, data, error } = useQuery<TaskData>(GET_TASKS);\n\n  if (loading) return <div className=\"loading\">Loading...</div>;\n  if (error) {\n    return (\n      <div className=\"error\">\n        <div>{error.message}</div>\n        <pre>{JSON.stringify(error.networkError, null, 2)}</pre>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"list\">\n      <ul>\n        {data?.tasks.map((task: any) => (\n          <li key={task.id}>\n            <TaskItem task={task} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Header } from './Header';\nimport { TaskNew } from './tasks/New';\nimport { TaskList } from './tasks/List';\nimport { ActiveTaskStore } from '../contexts/ActiveTask';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"content\">\n        <ActiveTaskStore>\n          <TaskNew />\n          <TaskList />\n        </ActiveTaskStore>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport { client } from './apollo';\nimport './assets/index.css';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}